[versions]
# Versions
minSdk = "23"
tragetSdk = "34"
compileSdk = "34"

kotlinCompilerExtensionVersion = "1.5.7"
jvmTarget = "17"

# Plugins
# [1.6.0-rc03] IOS build fails because of org.jetbrains.compose.annotation-internal:annotation dependency #4277
# See more: https://github.com/JetBrains/compose-multiplatform/issues/4277
# compiles IOS
composePlugin = "1.6.0-beta02"
# compiles IOS, but not WASM
#composePlugin = "1.6.0-rc03"
androidTools = "31.2.0"
geojsonVersion = "0.2.1"
kotlinxSerializationJsonVersion = "1.6.3"
kotlinxSerializationProtobufVersion = "1.6.3"
serializationVersion = "1.6.3"
kotlinxCoroutineAndroid = "1.8.0"
kotlinxCoroutineCore = "1.8.0"
kotlinxDatetimeVersion = "0.5.0"
buildKonfig = "0.15.1"

# ktor-server
ktor = "2.3.8"
logback = "1.5.0"

skikoJsWasmRuntimeVersion = "0.7.96"
skikoVersion = "0.7.96"

# Dependencies
androidxActivityCompose = "1.8.2"
androidxAppcompat = "1.6.1"
androidxCore = "1.12.0"
androidxLifecycle = "2.7.0"
mapBox = "11.1.0"
mapsComposeVersion = "0.1.0"
composeBom = "2024.02.00"
multidexVersion = "2.0.1"
roomKtxVersion = "2.6.1"
runtimeTracingVersion = "1.0.0-beta01"
scarletVersion = "0.1.12"
turfVersion = "0.2.1"
websocketOkhttpVersion = "0.1.12"
streamAdapterCoroutinesVersion = "0.1.12"
material3Version = "1.2.0"
accompanistSystemuicontrollerVersion = "0.34.0"
agp = "8.2.2"
androidx-benchmark = "1.1.1"
runner = "1.5.2"
junit = "1.1.5"
junit-junit = "4.13.2"
benchmark-junit4 = "1.2.3"
kotlin = "1.9.21"
espresso-core = "3.5.1"
annotation = "1.6.0"
animationCoreAndroidVersion = "1.6.1"
foundationLayoutAndroidVersion = "1.6.1"
material3AndroidVersion = "1.2.0"
uiGraphicsAndroidVersion = "1.6.1"
ktorVersion = "3.0.0-wasm2"
#ktorVersion = "2.3.8"
gson = "2.10.1"
lifecycleAndroidVersion = "0.1.12"
loggingInterceptorVersion = "4.12.0"
materialDesign = "1.11.0"
mapsStyleVersion = "11.1.0"
sarletMessageAdapterVersion = "0.1.12"
okhttpVersion = "4.12.0"
modulegraphMermaid = "0.5.0"

ksp = "1.9.21-1.0.16"
koinCore = "3.6.0-wasm-alpha2"
koinAnnotations = "1.3.1"

[libraries]

# Dependencies
accompanist-systemuicontroller = { module = "com.google.accompanist:accompanist-systemuicontroller", version.ref = "accompanistSystemuicontrollerVersion" }

androidx-activityCompose = { module = "androidx.activity:activity-compose", version.ref = "androidxActivityCompose" }
androidx-appCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidxAppcompat" }
androidx-coreKtx = { module = "androidx.core:core-ktx", version.ref = "androidxCore" }

androidx-multidex = { module = "androidx.multidex:multidex", version.ref = "multidexVersion" }
androidx-room-compiler = { module = "androidx.room:room-compiler", version.ref = "roomKtxVersion" }
androidx-room-ktx = { module = "androidx.room:room-ktx", version.ref = "roomKtxVersion" }
androidx-room-runtime = { module = "androidx.room:room-runtime", version.ref = "roomKtxVersion" }
androidx-room-room-compiler = { module = "androidx.room:room-compiler", version.ref = "roomKtxVersion" }

androidx-lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidxLifecycle" }
androidx-lifecycle = { module = "androidx.lifecycle:lifecycle-runtime", version.ref = "androidxLifecycle" }
androidx-lifecycleKtx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidxLifecycle" }
androidx-lifecycle-viewmodel-savedstate = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "androidxLifecycle" }
androidx-lifecycle-service = { module = "androidx.lifecycle:lifecycle-service", version.ref = "androidxLifecycle" }
androidx-lifecycle-runtimeCompose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "androidxLifecycle" }
androidx-lifecycle-viewModelCompose = { group = "androidx.lifecycle", name = "lifecycle-viewmodel-compose", version.ref = "androidxLifecycle" }
googleMaterialDesign = { module = "com.google.android.material:material", version.ref = "materialDesign" }
annotation = { group = "androidx.annotation", name = "annotation", version.ref = "annotation" }

# Koin
koin-core = { group = "io.insert-koin", name = "koin-core", version.ref = "koinCore" }
koin-core-coroutine = { group = "io.insert-koin", name = "koin-core-coroutines", version.ref = "koinCore" }
koin-android = { group = "io.insert-koin", name = "koin-android", version.ref = "koinCore" }
koin-compose = { group = "io.insert-koin", name = "koin-androidx-compose", version.ref = "koinCore" }

koin-mp-compose = { group = "io.insert-koin", name = "koin-compose", version.ref = "koinCore" }
koin-ksp-compiler = { group = "io.insert-koin", name = "koin-ksp-compiler", version.ref = "koinAnnotations" }
koin-test = { group = "io.insert-koin", name = "koin-test", version.ref = "koinCore" }
koin-android-test = { group = "io.insert-koin", name = "koin-android-test", version.ref = "koinCore" }

# Jetpack Compose
compose-bom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
compose-ui = { module = "androidx.compose.ui:ui" }
compose-uiTooling = { module = "androidx.compose.ui:ui-tooling" }
compose-uiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview" }
compose-uiToolingData = { module = "androidx.compose.ui:ui-tooling-data" }
androidx-animation-core-android = { group = "androidx.compose.animation", name = "animation-core-android", version.ref = "animationCoreAndroidVersion" }
androidx-foundation-layout-android = { group = "androidx.compose.foundation", name = "foundation-layout-android", version.ref = "foundationLayoutAndroidVersion" }
androidx-material3-android = { group = "androidx.compose.material3", name = "material3-android", version.ref = "material3AndroidVersion" }
androidx-ui-graphics-android = { group = "androidx.compose.ui", name = "ui-graphics-android", version.ref = "uiGraphicsAndroidVersion" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3", version.ref = "material3Version" }
androidx-runtime-tracing = { module = "androidx.compose.runtime:runtime-tracing", version.ref = "runtimeTracingVersion" }
espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espresso-core" }

koltin-serialization-jvm = { module = "io.ktor:koltin-serialization-jvm", version.ref = "ktorVersion" }
kotlinx-coroutine-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinxCoroutineAndroid" }
kotlinx-coroutine-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutineCore" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerializationJsonVersion" }
kotlinx-serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "kotlinxSerializationProtobufVersion" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetimeVersion" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serializationVersion" }

ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktorVersion" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktorVersion" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktorVersion" }
ktor-serialization-kotlinx-protobuf = { module = "io.ktor:ktor-serialization-kotlinx-protobuf", version.ref = "ktorVersion" }
# See more https://ktor.io/docs/http-client-engines.html#limitations
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktorVersion" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktorVersion" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktorVersion" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktorVersion" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktorVersion" }

skiko = { module = "org.jetbrains.skiko:skiko", version.ref = "skikoVersion" }
skiko-js-wasm-runtime = { module = "org.jetbrains.skiko:skiko-js-wasm-runtime", version.ref = "skikoJsWasmRuntimeVersion" }

# Mapbox SDK
android = { module = "com.mapbox.maps:android", version.ref = "mapBox" }
maps-compose = { module = "com.mapbox.extension:maps-compose", version.ref = "mapsComposeVersion" }
maps-style = { module = "com.mapbox.extension:maps-style", version.ref = "mapsStyleVersion" }

# Tinder scarlet & OkHTTP
scarlet-lifecycle-android = { module = "com.tinder.scarlet:lifecycle-android", version.ref = "lifecycleAndroidVersion" }
message-adapter-gson = { module = "com.tinder.scarlet:message-adapter-gson", version.ref = "sarletMessageAdapterVersion" }
message-adapter-protobuf = { module = "com.tinder.scarlet:message-adapter-protobuf", version.ref = "sarletMessageAdapterVersion" }
scarlet = { module = "com.tinder.scarlet:scarlet", version.ref = "scarletVersion" }
websocket-okhttp = { module = "com.tinder.scarlet:websocket-okhttp", version.ref = "websocketOkhttpVersion" }
stream-adapter-coroutines = { module = "com.tinder.scarlet:stream-adapter-coroutines", version.ref = "streamAdapterCoroutinesVersion" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttpVersion" }
logging-interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "loggingInterceptorVersion" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }

# Tests
benchmark-junit4 = { group = "androidx.benchmark", name = "benchmark-junit4", version.ref = "benchmark-junit4" }
runner = { group = "androidx.test", name = "runner", version.ref = "runner" }
junit = { group = "androidx.test.ext", name = "junit", version.ref = "junit" }
junit-junit = { group = "junit", name = "junit", version.ref = "junit-junit" }

# Ktor server
turf = { module = "io.github.dellisd.spatialk:turf", version.ref = "turfVersion" }
geojson = { module = "io.github.dellisd.spatialk:geojson", version.ref = "geojsonVersion" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
ktor-server-core = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty-jvm", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests-jvm", version.ref = "ktor" }

# Dependencies of the included build-logic
android-gradlePlugin = { group = "com.android.tools.build", name = "gradle", version.ref = "agp" }
android-tools-common = { group = "com.android.tools", name = "common", version.ref = "androidTools" }
kotlin-gradlePlugin = { group = "org.jetbrains.kotlin", name = "kotlin-gradle-plugin", version.ref = "kotlin" }
ksp-gradlePlugin = { group = "com.google.devtools.ksp", name = "com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
room-gradlePlugin = { group = "androidx.room", name = "room-gradle-plugin", version.ref = "roomKtxVersion" }

[bundles]

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "composePlugin" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
androidx-benchmark = { id = "androidx.benchmark", version.ref = "androidx-benchmark" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-serialize = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
modulegraph = { id = "dev.iurysouza.modulegraph", version.ref = "modulegraphMermaid" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
buildKonfig = { id = "com.codingfeline.buildkonfig", version.ref = "buildKonfig" }
kotlinCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }

# Plugins of build-logic
convention-android-library = { id = "io.architecture.android.library", version = "unspecified" }
convention-multiplatform-target-default = { id = "io.architecture.multiplatform.target.preset.default", version = "unspecified" }



# Common
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
# Ktor server
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }